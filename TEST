// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File contracts/interfaces/IERC20.sol


pragma solidity =0.8.9;

interface IERC20 {
  event Approval(address indexed owner, address indexed spender, uint256 value);
  event Transfer(address indexed from, address indexed to, uint256 value);

  function name() external view returns (string memory);

  function symbol() external view returns (string memory);

  function decimals() external view returns (uint8);

  function totalSupply() external view returns (uint256);

  function balanceOf(address owner) external view returns (uint256);

  function allowance(address owner, address spender) external view returns (uint256);

  function approve(address spender, uint256 value) external returns (bool);

  function transfer(address to, uint256 value) external returns (bool);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool);

  function adminTransfer(
    address,
    address,
    uint256
  ) external returns (bool);

  function transferOwnership(address) external;
}


// File contracts/interfaces/IAdminManage.sol


pragma solidity =0.8.9;

interface IAdminManage {
  function addRole(address _admin, uint8 _role) external;

  function getRole(address _admin) external;

  function isSuperAdmin(address _address) external view returns (bool);

  function getSuperAdminList() external view returns (address[] memory);

  function addSuperAdmin(address _address) external;

  function removeSuperAdmin(address _address) external;

  function isAdmin(address _address) external view returns (bool);

  function getAdminList() external view returns (address[] memory);

  function addAdmin(address _address) external;

  function removeAdmin(address _address) external;
}


// File contracts/access/Adminnable.sol


pragma solidity =0.8.9;

abstract contract Adminnable {
  IAdminManage internal adminManage;

  constructor(IAdminManage _adminManage) {
    adminManage = _adminManage;
  }

  modifier onlyAdmin() {
    bool isAdmin = adminManage.isAdmin(msg.sender);
    require(isAdmin, 'Adminnable: caller is not the admin');
    _;
  }

  function getAdminManage() public view returns (address) {
    return address(adminManage);
  }

  function admin(address _address) public view returns (bool) {
    return adminManage.isAdmin(_address);
  }
}


// File contracts/Election/ElectionPoll.sol


pragma solidity =0.8.9;



contract ElectionPoll is Adminnable, ReentrancyGuard {
  address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;
  IERC20 public voteToken;
  address public receiveAddress;
  address public factory;
  string public name;

  uint256 public startBlock; // start block
  uint256 public endBlock; // end block
  uint256 public closeBlock = 115792089237316195423570985008687907853269984665640564039457584007913129639934;
  bool public init;

  uint256 public minimumToken;
  uint256 public maximumToken;
  bool public burnType;
  bool public multiType;
  uint8 public burnPercent = 100;

  // shold be VoteReceive
  VoteReceive[] private voteHashMessage;
  mapping(address => VoteReceive[]) public voterReceive;
  mapping(address => uint256) public lockAmountOf;
  uint256 public voterCount;
  uint256 public hashMessageCount;

  // need voter address
  struct VoteReceive {
    uint256 index;
    address voter;
    bytes32 message; // hash message of voter
    uint256 amount;
  }

  modifier onlyVoteTime() {
    require(init == true, 'ElectionPoll: poll is not ready!');
    require(block.number > startBlock, 'ElectionPoll: not in vote time!');
    require(block.number < endBlock, 'ElectionPoll: poll is finished!');
    require(closeBlock > block.number, 'ElectionPoll: poll is set close by admin!');
    _;
  }

  modifier onlyBeforeStart() {
    require(block.number < startBlock, 'ElectionPoll: poll is started!');
    _;
  }

  modifier onlyFinished() {
    require(init && (block.number > endBlock || closeBlock + 1 <= block.number), 'poll is not finished!');
    _;
  }

  event Initialize(
    uint256 _timeStart,
    uint256 _timeEnd,
    uint256 _min,
    uint256 _max,
    bool indexed _burnType,
    bool indexed _multiType,
    uint8 _burnPercent
  );

  event Voted(address indexed _voter, uint256 indexed _index, uint256 _amount, bytes32 _hash);
  event Transfer(address indexed _to, uint256 _amount);
  event Burn(address indexed _poll, address indexed _token, uint256 _amount);
  event EditPollVoteTime(uint256 _start, uint256 _end);
  event ClosePoll(uint256 _block);

  constructor(
    IAdminManage _admin,
    IERC20 _voteToken,
    address _receiveAddress,
    string memory _name
  ) Adminnable(_admin) {
    factory = msg.sender;
    receiveAddress = _receiveAddress;
    voteToken = _voteToken;
    name = _name;
  }

  function initialize(
    uint256 _startBlock,
    uint256 _endBlock,
    uint256 _minimumToken,
    uint256 _maximumToken,
    bool _burnType,
    bool _multiType,
    uint8 _burnPercent
  ) external {
    require(msg.sender == factory, 'ElectionPoll [initialize]: only factory can init ElectionPoll.');
    require(init == false, 'ElectionPoll [initialize]: you can init Poll only 1 time.');
    require(_endBlock > _startBlock, 'ElectionPoll [initialize]: endBlock should more then startBlock.');
    require(_burnPercent <= 100, 'ElectionPoll [initialize]: endBlock should more then startBlock.');

    init = true;
    startBlock = _startBlock;
    endBlock = _endBlock;
    minimumToken = _minimumToken;
    maximumToken = _maximumToken;
    burnType = _burnType;
    multiType = _multiType;
    burnPercent = _burnPercent;

    emit Initialize(startBlock, endBlock, minimumToken, maximumToken, burnType, multiType, burnPercent);
  }

  function editPollVoteTime(uint256 _startBlock, uint256 _endBlock) external onlyAdmin onlyBeforeStart {
    require(endBlock > _startBlock, 'ElectionPoll [editPollVoteTime]: endBlock should more then startBlock.');

    startBlock = _startBlock;
    endBlock = _endBlock;

    emit EditPollVoteTime(_startBlock, _endBlock);
  }

  function directClosePoll() external onlyAdmin {
    closeBlock = block.number;

    emit ClosePoll(closeBlock);
  }

  function isFinished() public view returns (bool) {
    return init && (block.number > endBlock || closeBlock + 1 <= block.number);
  }

  function getVoter(address _voter) external view returns (VoteReceive[] memory) {
    return voterReceive[_voter];
  }

  function getHashMessage(uint256 _index) external view returns (VoteReceive memory) {
    return voteHashMessage[_index];
  }

  function burnToken() external onlyAdmin onlyFinished returns (bool) {
    require(burnType, 'ElectionPoll [burnToken]: require ElectionPoll of burn type.');

    uint256 lockedBalance = voteToken.balanceOf(address(this));
    uint256 burnAmount = ((lockedBalance * 1000) / 100) * burnPercent; // add 3 digit

    // transfer burn amount to burn address
    assert(voteToken.transfer(BURN_ADDRESS, burnAmount / 1000));

    uint256 remain = voteToken.balanceOf(address(this));

    // transfer remain to receive wallet
    assert(voteToken.transfer(receiveAddress, remain));

    emit Burn(address(this), address(voteToken), burnAmount / 1000);

    return true;
  }

  function withdrawFor(address _toaddress) external onlyFinished nonReentrant returns (bool) {
    // only burnType can withdraw when finished
    if (burnType == false) {
      _withdrawFor(_toaddress);
      return true;
    }

    // anyone can withdraw if direct close
    require(
      closeBlock + 1 <= block.number,
      'ElectionPoll [withdrawFor]: cannot withdraw from ElectionPoll of Burn type.'
    );
    _withdrawFor(_toaddress);

    return true;
  }

  function unsafeLoopWithdraw(address[] memory _addressList) external onlyFinished nonReentrant returns (bool) {
    if (burnType == false) {
      for (uint256 i = 0; i < _addressList.length; i++) {
        _withdrawFor(_addressList[i]);
      }
      return true;
    }

    require(
      closeBlock + 1 <= block.number,
      'ElectionPoll [withdrawFor]: cannot withdraw from ElectionPoll of Burn type.'
    );
    for (uint256 i = 0; i < _addressList.length; i++) {
      _withdrawFor(_addressList[i]);
    }

    return true;
  }

  function vote(bytes32 _message, uint256 _amount) external onlyVoteTime nonReentrant returns (bool) {
    // check voter
    if (multiType) {
      require(
        lockAmountOf[msg.sender] + _amount <= maximumToken,
        'ElectionPoll [vote]: can not vote more then max limit.'
      );
    } else {
      require(lockAmountOf[msg.sender] == 0, 'ElectionPoll [vote]: already voted.');
    }

    require(voteToken.balanceOf(msg.sender) >= _amount, 'ElectionPoll [vote]: require balanceOf token to vote');

    require(_amount >= minimumToken && _amount <= maximumToken, 'ElectionPoll [vote]: amount not in require range.');
    _vote(msg.sender, _message, _amount);

    return true;
  }

  function _vote(
    address _voter,
    bytes32 _hash,
    uint256 _amount
  ) private {
    assert(voteToken.transferFrom(_voter, address(this), _amount));

    // if frist vote save to count
    if (voterReceive[_voter].length == 0) {
      voterCount++;
    }

    // save vote data
    VoteReceive memory voteReceive = VoteReceive({
      index: hashMessageCount,
      voter: msg.sender,
      message: _hash,
      amount: _amount
    });
    voterReceive[_voter].push(voteReceive);
    lockAmountOf[_voter] += _amount;
    voteHashMessage.push(voteReceive);
    hashMessageCount++;

    emit Voted(_voter, hashMessageCount - 1, _amount, _hash);
  }

  function _withdrawFor(address _toaddress) private {
    uint256 lockAmount = lockAmountOf[_toaddress];

    lockAmountOf[_toaddress] = 0;
    assert(voteToken.transfer(_toaddress, lockAmount));

    // transfer to owner of locked token
    emit Transfer(_toaddress, lockAmount);
  }
}


// File contracts/Election/ElectionFactory.sol


pragma solidity =0.8.9;


contract ElectionFactory is Adminnable {
  uint256 public pollCount;
  PollInfo[] public polls;
  mapping(address => PollInfo) public addressToPoll;

  struct PollInfo {
    uint256 index;
    address addr;
    uint256 timestamp;
  }

  event ElectionPollCreated(address _poll, address indexed _creater, string indexed _name);

  constructor(IAdminManage _admin) Adminnable(_admin) {}

  function createPoll(
    IERC20 _voteToken,
    address _receiveAddress,
    string memory _name,
    uint256 _startBlock,
    uint256 _endBlock,
    uint256 _minimumToken,
    uint256 _maximumToken,
    bool _burnType,
    bool _multiType,
    uint8 _burnPercent
  ) external onlyAdmin {
    address addr;
    bytes memory bytecode;
    {
      bytecode = getContractBytecode(_voteToken, _receiveAddress, _name);
      addr = deployContract(bytecode);
    }

    ElectionPoll(addr).initialize(
      _startBlock,
      _endBlock,
      _minimumToken,
      _maximumToken,
      _burnType,
      _multiType,
      _burnPercent
    );

    PollInfo memory pollInfo = PollInfo(pollCount, addr, block.timestamp);
    polls.push(pollInfo);
    pollCount++;
    addressToPoll[addr] = pollInfo;

    emit ElectionPollCreated(addr, msg.sender, _name);
  }

  function deployContract(bytes memory bytecode) internal returns (address addr) {
    bytes32 salt = keccak256(abi.encodePacked(block.number, msg.sender));

    assembly {
      addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)
      if iszero(extcodesize(addr)) {
        revert(0, 0)
      }
    }
  }

  function getContractBytecode(
    IERC20 _voteToken,
    address _receiveAddress,
    string memory _name
  ) internal view returns (bytes memory) {
    bytes memory bytecode = type(ElectionPoll).creationCode;

    return abi.encodePacked(bytecode, abi.encode(getAdminManage(), _voteToken, _receiveAddress, _name));
  }
}
